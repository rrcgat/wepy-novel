<style lang="less">
  @grey: #9e9e9e;
  .intro {
    border-left: solid 5px;
    margin: 10rpx 0;
    padding: 0 10rpx;
    color: @grey;
  }
  .tag-content {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
    align-items: center;
  }
  .custom-tag {
    font-size: 24rpx;
    display: flex;
    align-items: center;
    background-color: @grey;
    margin-top: 20rpx;
    color: white;
    padding: 5rpx 20rpx;
    margin-right: 10rpx;
    border-radius: 30rpx;
  }
  .dialog-content {
    position: fixed;
    display: flex;
    flex-wrap: wrap;
    top: 200rpx;
    width: 650rpx;
    margin-left: 50rpx;
    background: #f8f8f8;
    color: black;
    z-index: 10;
    border-radius: 10rpx;
  }
  .dialog-item {
    display: flex;
    width: 600rpx;
    font-size: 30rpx;
    margin: 0 30rpx;
    margin-top: 30rpx;
  }
  .confirm {
    padding: 30rpx 0;
    border-top: solid 1px #ddd;
    justify-content: center;
  }
  .mask {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
    background: rgba(0, 0, 0, 0);
  }
  .show-dialog {
    display: block;
  }
  .left-margin {
    font-size: 30rpx;
    margin-left: 10rpx;
  }
</style>
<template lang="pug">
  view
    card.grey
      view.card-title 作品信息
      view.sub-title.group.space-between
        view.group-item {{ book.book_name }}
        view(@tap.stop="favorite({{book.id}})").iconfont.group-item.orange 
          text &#xf044;
          //- text &#xe622; // like
          //- text &#xe62a; // break
      view.group
        text.iconfont.orange &#xe601;
        text.left-margin {{ book.author }}
      view.group.space-between
        view.group-item 发布日期
        view.group-item {{ book.pub_date }}
      view.group
        text.tag {{ book.word_count / 10000 }} 万字
        text.tag.green-text {{ book.status }}
        text.tag.cyan-text  {{ book.label }}
        picker(@change="changeType" value="{{bookTypeId}}" range="{{bookTypes}}")
          text.tag.orange-text {{ bookTypes[bookTypeId] }}
      view.tag-content
        repeat(for="{{tags}}" index="index" key="index" item="tag")
          view.custom-tag {{ tag }}
            text(@tap.stop="deleteTag({{index}})").iconfont.deep-orange-text.left-margin &#xe767;
        view(@tap.stop="toggleDialog").custom-tag 添加标签
          text.iconfont.orange-text.left-margin &#xe604;
      view.intro
        text {{ book.intro }}
    view(style="display: {{focus ? 'block': 'none'}}")
      view(@tap.stop="toggleDialog").mask
      view.dialog-content
        view.dialog-item 请输入标签
        input(value="{{newTag}}" @input="setTag" maxlength="20" focus="{{focus}}").dialog-item
        view(@tap.stop="addTag").dialog-item.confirm 保存
    timeline(wx:if="{{timelines}}" :timelines.sync="timelines")
    view(style="width: 750rpx; height: 900rpx;")
      ec-canvas(id="mychart-dom-bar" canvas-id="chart-pie" ec="{{ ec }}")
</template>

<script>
  import wepy from 'wepy'
  import Card from '@/components/card'
  import Timeline from '@/components/timeline'
  import * as echarts from '../ec-canvas/echarts'
  import favoriteMixin from '@/mixins/favorite'
  import requests from '@/utils/requests'
  import hosts from '@/config'

  export default class Book extends wepy.page {
    config = {
      usingComponents: {
        'ec-canvas': '../ec-canvas/ec-canvas'
      }
    }

    data = {
      ec: {
        onInit: this.initChart
      },
      bookTypes: ['未知', '无 CP', '单 CP', '多 CP/P'],
      bookTypeId: 0,
      tags: {},
      newTag: '',
      focus: false
    }

    computed = {
      book() {
        return wepy.$store.getState().info.book.info
      },
      timelines() {
        return wepy.$store.getState().info.book.timeline
      }
    }

    components = {
      card: Card,
      timeline: Timeline
    }

    methods = {
      async addTag() {
        this.focus = false
        this.showDialog = false
        let tag = this.newTag.trim()
        if (tag && !this.tags.includes(tag)) {
          let res = await this.updateBook(requests.post, { id: this.book.id, tag: tag })
          if (res) {
            this.tags.push(tag)
          }
        }
        this.newTag = ''
      },
      deleteTag(index) {
        let tag = this.tags.splice(index, 1)[0]
        this.updateBook(requests.delete, { id: this.book.id, tag: tag })
      },
      changeType(e) {
        if (this.bookTypeId === e.detail.value) {
          return false
        }
        this.bookTypeId = e.detail.value
        this.updateBook(requests.put, { id: this.book.id, book_type: this.bookTypeId })
      },
      toggleDialog() {
        this.focus = !this.focus
      },
      setTag(e) {
        this.newTag = e.detail.value
      }
    }

    mixins = [favoriteMixin]

    onLoad() {
      this.tags = []
      let book = wepy.$store.getState().info.book.info
      this.bookTypeId = this.bookTypes.indexOf(book.book_type)
      if (book.tag) {
        this.tags = book.tag
      }
    }

    updateBook(request, data) {
      let res = true
      request({ url: hosts.book, data: data }).then(res => {
        wepy.showToast({
          title: '更新成功',
          duration: 2000
        })
      }).catch(err => {
        console.log(err)
        let title = '更新失败，可能出了点问题'
        if (err.statusCode === 400) {
          title = '更新失败，请检查是否有敏感词或是否为有效标签'
        }
        wepy.showToast({
          title: title,
          icon: 'none',
          duration: 3000
        })
        res = false
      })
      return res
    }

    initChart(canvas, width, height) {
      const chart = echarts.init(canvas, null, {
        width: width,
        height: height
      })
      canvas.setChart(chart)
      let pie = wepy.$store.getState().info.book.time_distribution

      let option = {
        title: {
          text: '更新时间分布',
          top: 30,
          x: 'center'
        },
        tooltip: {
          trigger: 'item',
          formatter: '{a} \n{b} 点: {c} 次({d}%)'
        },
        color: ['#37A2DA', '#67E0E3', '#FFDB5C', '#fb7293', '#E690D1', '#9d96f5'],
        legend: {
          left: 'center',
          bottom: 50,
          data: pie.map(item => item.name)
        },
        series: [
          {
            radius: '65%',
            name: '时间/次数',
            type: 'pie',
            data: pie
          }
        ]
      }

      chart.setOption(option)
      return chart
    }
  }
</script>
